---
defaultChannel: stable
icon:
  base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDIyLjAuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCAxMjgwIDEyODAiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDEyODAgMTI4MDsiIHhtbDpzcGFjZT0icHJlc2VydmUiPgo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgoJLnN0MHtmaWxsOiMwMTMxNDQ7fQoJLnN0MXtmaWxsOiMwMDkzREQ7fQo8L3N0eWxlPgo8Zz4KCTxwYXRoIGNsYXNzPSJzdDAiIGQ9Ik04MTAuOSwxODAuOWMtMjUzLjYsMC00NTkuMSwyMDUuNS00NTkuMSw0NTkuMXMyMDUuNSw0NTkuMSw0NTkuMSw0NTkuMVMxMjcwLDg5My42LDEyNzAsNjQwCgkJUzEwNjQuNSwxODAuOSw4MTAuOSwxODAuOXogTTgxMC45LDEwMjkuMmMtMjE1LDAtMzg5LjItMTc0LjMtMzg5LjItMzg5LjJjMC0yMTUsMTc0LjMtMzg5LjIsMzg5LjItMzg5LjJTMTIwMC4xLDQyNSwxMjAwLjEsNjQwCgkJUzEwMjUuOSwxMDI5LjIsODEwLjksMTAyOS4yeiIvPgoJPHBhdGggY2xhc3M9InN0MSIgZD0iTTY1My4zLDI4NGMtMTM2LjQsNjAuNS0yMzEuNiwxOTcuMS0yMzEuNiwzNTZjMCwxNTguOCw5NS4yLDI5NS41LDIzMS42LDM1NmM5OC40LTg3LjEsMTYwLjQtMjE0LjMsMTYwLjQtMzU2CgkJQzgxMy43LDQ5OC4zLDc1MS42LDM3MS4xLDY1My4zLDI4NHoiLz4KCTxwYXRoIGNsYXNzPSJzdDEiIGQ9Ik0zNTEuOCw2NDBjMC0xMDkuOCwzOC42LTIxMC41LDEwMi44LTI4OS41Yy0zOS42LTE4LjItODMuNi0yOC4zLTEzMC0yOC4zQzE1MC45LDMyMi4yLDEwLDQ2NC41LDEwLDY0MAoJCXMxNDAuOSwzMTcuOCwzMTQuNiwzMTcuOGM0Ni4zLDAsOTAuNC0xMC4xLDEzMC0yOC4zQzM5MC4zLDg1MC41LDM1MS44LDc0OS44LDM1MS44LDY0MHoiLz4KPC9nPgo8L3N2Zz4K
  mediatype: image/svg+xml
name: kiali
schema: olm.package
---
entries:
- name: kiali-operator.v1.47.0
  skipRange: '>=1.0.0 <1.47.0'
- name: kiali-operator.v1.48.0
  replaces: kiali-operator.v1.47.0
  skipRange: '>=1.0.0 <1.48.0'
- name: kiali-operator.v1.49.0
  replaces: kiali-operator.v1.48.0
  skipRange: '>=1.0.0 <1.49.0'
- name: kiali-operator.v1.50.0
  replaces: kiali-operator.v1.49.0
  skipRange: '>=1.0.0 <1.50.0'
- name: kiali-operator.v1.51.0
  replaces: kiali-operator.v1.50.0
  skipRange: '>=1.0.0 <1.51.0'
- name: kiali-operator.v1.52.0
  replaces: kiali-operator.v1.51.0
  skipRange: '>=1.0.0 <1.52.0'
- name: kiali-operator.v1.53.0
  replaces: kiali-operator.v1.52.0
  skipRange: '>=1.0.0 <1.53.0'
- name: kiali-operator.v1.54.0
  replaces: kiali-operator.v1.53.0
  skipRange: '>=1.0.0 <1.54.0'
- name: kiali-operator.v1.55.0
  replaces: kiali-operator.v1.54.0
  skipRange: '>=1.0.0 <1.55.0'
- name: kiali-operator.v1.56.0
  replaces: kiali-operator.v1.55.0
  skipRange: '>=1.0.0 <1.56.0'
- name: kiali-operator.v1.57.0
  replaces: kiali-operator.v1.56.0
  skipRange: '>=1.0.0 <1.57.0'
- name: kiali-operator.v1.58.0
  replaces: kiali-operator.v1.57.0
  skipRange: '>=1.0.0 <1.58.0'
- name: kiali-operator.v1.59.0
  replaces: kiali-operator.v1.58.0
  skipRange: '>=1.0.0 <1.59.0'
- name: kiali-operator.v1.60.0
  replaces: kiali-operator.v1.59.0
  skipRange: '>=1.0.0 <1.60.0'
- name: kiali-operator.v1.61.0
  replaces: kiali-operator.v1.60.0
  skipRange: '>=1.0.0 <1.61.0'
- name: kiali-operator.v1.62.0
  replaces: kiali-operator.v1.61.0
  skipRange: '>=1.0.0 <1.62.0'
- name: kiali-operator.v1.63.0
  replaces: kiali-operator.v1.62.0
  skipRange: '>=1.0.0 <1.63.0'
- name: kiali-operator.v1.63.1
  replaces: kiali-operator.v1.63.0
  skipRange: '>=1.0.0 <1.63.1'
- name: kiali-operator.v1.64.0
  replaces: kiali-operator.v1.63.1
  skipRange: '>=1.0.0 <1.64.0'
- name: kiali-operator.v1.65.0
  replaces: kiali-operator.v1.64.0
  skipRange: '>=1.0.0 <1.65.0'
- name: kiali-operator.v1.66.0
  replaces: kiali-operator.v1.65.0
  skipRange: '>=1.0.0 <1.66.0'
- name: kiali-operator.v1.67.0
  replaces: kiali-operator.v1.66.0
  skipRange: '>=1.0.0 <1.67.0'
- name: kiali-operator.v1.68.0
  replaces: kiali-operator.v1.67.0
  skipRange: '>=1.0.0 <1.68.0'
- name: kiali-operator.v1.69.0
  replaces: kiali-operator.v1.68.0
  skipRange: '>=1.0.0 <1.69.0'
- name: kiali-operator.v1.70.0
  replaces: kiali-operator.v1.69.0
  skipRange: '>=1.0.0 <1.70.0'
- name: kiali-operator.v1.71.0
  replaces: kiali-operator.v1.70.0
  skipRange: '>=1.0.0 <1.71.0'
- name: kiali-operator.v1.72.0
  replaces: kiali-operator.v1.71.0
  skipRange: '>=1.0.0 <1.72.0'
- name: kiali-operator.v1.73.0
  replaces: kiali-operator.v1.72.0
  skipRange: '>=1.0.0 <1.73.0'
- name: kiali-operator.v1.74.0
  replaces: kiali-operator.v1.73.0
  skipRange: '>=1.0.0 <1.74.0'
- name: kiali-operator.v1.75.0
  replaces: kiali-operator.v1.74.0
  skipRange: '>=1.0.0 <1.75.0'
- name: kiali-operator.v1.76.0
  replaces: kiali-operator.v1.75.0
  skipRange: '>=1.0.0 <1.76.0'
- name: kiali-operator.v1.77.0
  replaces: kiali-operator.v1.76.0
  skipRange: '>=1.0.0 <1.77.0'
- name: kiali-operator.v1.78.0
  replaces: kiali-operator.v1.77.0
  skipRange: '>=1.0.0 <1.78.0'
- name: kiali-operator.v1.79.0
  replaces: kiali-operator.v1.78.0
  skipRange: '>=1.0.0 <1.79.0'
- name: kiali-operator.v1.80.0
  replaces: kiali-operator.v1.79.0
  skipRange: '>=1.0.0 <1.80.0'
- name: kiali-operator.v1.81.0
  replaces: kiali-operator.v1.80.0
  skipRange: '>=1.0.0 <1.81.0'
- name: kiali-operator.v1.82.0
  replaces: kiali-operator.v1.81.0
  skipRange: '>=1.0.0 <1.82.0'
- name: kiali-operator.v1.83.0
  replaces: kiali-operator.v1.82.0
  skipRange: '>=1.0.0 <1.83.0'
- name: kiali-operator.v1.84.0
  replaces: kiali-operator.v1.83.0
  skipRange: '>=1.0.0 <1.84.0'
- name: kiali-operator.v1.85.0
  replaces: kiali-operator.v1.84.0
  skipRange: '>=1.0.0 <1.85.0'
- name: kiali-operator.v1.86.0
  replaces: kiali-operator.v1.85.0
  skipRange: '>=1.0.0 <1.86.0'
- name: kiali-operator.v1.87.0
  replaces: kiali-operator.v1.86.0
  skipRange: '>=1.0.0 <1.87.0'
- name: kiali-operator.v1.88.0
  replaces: kiali-operator.v1.87.0
  skipRange: '>=1.0.0 <1.88.0'
- name: kiali-operator.v1.89.0
  replaces: kiali-operator.v1.88.0
  skipRange: '>=1.0.0 <1.89.0'
- name: kiali-operator.v2.0.0
  replaces: kiali-operator.v1.89.0
  skipRange: '>=1.0.0 <2.0.0'
- name: kiali-operator.v2.1.0
  replaces: kiali-operator.v2.0.0
  skipRange: '>=1.0.0 <2.1.0'
- name: kiali-operator.v2.2.0
  replaces: kiali-operator.v2.1.0
  skipRange: '>=1.0.0 <2.2.0'
- name: kiali-operator.v2.3.0
  replaces: kiali-operator.v2.2.0
  skipRange: '>=1.0.0 <2.3.0'
- name: kiali-operator.v2.4.0
  replaces: kiali-operator.v2.3.0
  skipRange: '>=1.0.0 <2.4.0'
- name: kiali-operator.v2.5.0
  replaces: kiali-operator.v2.4.0
  skipRange: '>=1.0.0 <2.5.0'
name: alpha
package: kiali
schema: olm.channel
---
entries:
- name: kiali-operator.v1.47.0
  skipRange: '>=1.0.0 <1.47.0'
- name: kiali-operator.v1.48.0
  replaces: kiali-operator.v1.47.0
  skipRange: '>=1.0.0 <1.48.0'
- name: kiali-operator.v1.49.0
  replaces: kiali-operator.v1.48.0
  skipRange: '>=1.0.0 <1.49.0'
- name: kiali-operator.v1.50.0
  replaces: kiali-operator.v1.49.0
  skipRange: '>=1.0.0 <1.50.0'
- name: kiali-operator.v1.51.0
  replaces: kiali-operator.v1.50.0
  skipRange: '>=1.0.0 <1.51.0'
- name: kiali-operator.v1.52.0
  replaces: kiali-operator.v1.51.0
  skipRange: '>=1.0.0 <1.52.0'
- name: kiali-operator.v1.53.0
  replaces: kiali-operator.v1.52.0
  skipRange: '>=1.0.0 <1.53.0'
- name: kiali-operator.v1.54.0
  replaces: kiali-operator.v1.53.0
  skipRange: '>=1.0.0 <1.54.0'
- name: kiali-operator.v1.55.0
  replaces: kiali-operator.v1.54.0
  skipRange: '>=1.0.0 <1.55.0'
- name: kiali-operator.v1.56.0
  replaces: kiali-operator.v1.55.0
  skipRange: '>=1.0.0 <1.56.0'
- name: kiali-operator.v1.57.0
  replaces: kiali-operator.v1.56.0
  skipRange: '>=1.0.0 <1.57.0'
- name: kiali-operator.v1.58.0
  replaces: kiali-operator.v1.57.0
  skipRange: '>=1.0.0 <1.58.0'
- name: kiali-operator.v1.59.0
  replaces: kiali-operator.v1.58.0
  skipRange: '>=1.0.0 <1.59.0'
- name: kiali-operator.v1.60.0
  replaces: kiali-operator.v1.59.0
  skipRange: '>=1.0.0 <1.60.0'
- name: kiali-operator.v1.61.0
  replaces: kiali-operator.v1.60.0
  skipRange: '>=1.0.0 <1.61.0'
- name: kiali-operator.v1.62.0
  replaces: kiali-operator.v1.61.0
  skipRange: '>=1.0.0 <1.62.0'
- name: kiali-operator.v1.63.0
  replaces: kiali-operator.v1.62.0
  skipRange: '>=1.0.0 <1.63.0'
- name: kiali-operator.v1.63.1
  replaces: kiali-operator.v1.63.0
  skipRange: '>=1.0.0 <1.63.1'
- name: kiali-operator.v1.64.0
  replaces: kiali-operator.v1.63.1
  skipRange: '>=1.0.0 <1.64.0'
- name: kiali-operator.v1.65.0
  replaces: kiali-operator.v1.64.0
  skipRange: '>=1.0.0 <1.65.0'
- name: kiali-operator.v1.66.0
  replaces: kiali-operator.v1.65.0
  skipRange: '>=1.0.0 <1.66.0'
- name: kiali-operator.v1.67.0
  replaces: kiali-operator.v1.66.0
  skipRange: '>=1.0.0 <1.67.0'
- name: kiali-operator.v1.68.0
  replaces: kiali-operator.v1.67.0
  skipRange: '>=1.0.0 <1.68.0'
- name: kiali-operator.v1.69.0
  replaces: kiali-operator.v1.68.0
  skipRange: '>=1.0.0 <1.69.0'
- name: kiali-operator.v1.70.0
  replaces: kiali-operator.v1.69.0
  skipRange: '>=1.0.0 <1.70.0'
- name: kiali-operator.v1.71.0
  replaces: kiali-operator.v1.70.0
  skipRange: '>=1.0.0 <1.71.0'
- name: kiali-operator.v1.72.0
  replaces: kiali-operator.v1.71.0
  skipRange: '>=1.0.0 <1.72.0'
- name: kiali-operator.v1.73.0
  replaces: kiali-operator.v1.72.0
  skipRange: '>=1.0.0 <1.73.0'
- name: kiali-operator.v1.74.0
  replaces: kiali-operator.v1.73.0
  skipRange: '>=1.0.0 <1.74.0'
- name: kiali-operator.v1.75.0
  replaces: kiali-operator.v1.74.0
  skipRange: '>=1.0.0 <1.75.0'
- name: kiali-operator.v1.76.0
  replaces: kiali-operator.v1.75.0
  skipRange: '>=1.0.0 <1.76.0'
- name: kiali-operator.v1.77.0
  replaces: kiali-operator.v1.76.0
  skipRange: '>=1.0.0 <1.77.0'
- name: kiali-operator.v1.78.0
  replaces: kiali-operator.v1.77.0
  skipRange: '>=1.0.0 <1.78.0'
- name: kiali-operator.v1.79.0
  replaces: kiali-operator.v1.78.0
  skipRange: '>=1.0.0 <1.79.0'
- name: kiali-operator.v1.80.0
  replaces: kiali-operator.v1.79.0
  skipRange: '>=1.0.0 <1.80.0'
- name: kiali-operator.v1.81.0
  replaces: kiali-operator.v1.80.0
  skipRange: '>=1.0.0 <1.81.0'
- name: kiali-operator.v1.82.0
  replaces: kiali-operator.v1.81.0
  skipRange: '>=1.0.0 <1.82.0'
- name: kiali-operator.v1.83.0
  replaces: kiali-operator.v1.82.0
  skipRange: '>=1.0.0 <1.83.0'
- name: kiali-operator.v1.84.0
  replaces: kiali-operator.v1.83.0
  skipRange: '>=1.0.0 <1.84.0'
- name: kiali-operator.v1.85.0
  replaces: kiali-operator.v1.84.0
  skipRange: '>=1.0.0 <1.85.0'
- name: kiali-operator.v1.86.0
  replaces: kiali-operator.v1.85.0
  skipRange: '>=1.0.0 <1.86.0'
- name: kiali-operator.v1.87.0
  replaces: kiali-operator.v1.86.0
  skipRange: '>=1.0.0 <1.87.0'
- name: kiali-operator.v1.88.0
  replaces: kiali-operator.v1.87.0
  skipRange: '>=1.0.0 <1.88.0'
- name: kiali-operator.v1.89.0
  replaces: kiali-operator.v1.88.0
  skipRange: '>=1.0.0 <1.89.0'
- name: kiali-operator.v2.0.0
  replaces: kiali-operator.v1.89.0
  skipRange: '>=1.0.0 <2.0.0'
- name: kiali-operator.v2.1.0
  replaces: kiali-operator.v2.0.0
  skipRange: '>=1.0.0 <2.1.0'
- name: kiali-operator.v2.2.0
  replaces: kiali-operator.v2.1.0
  skipRange: '>=1.0.0 <2.2.0'
- name: kiali-operator.v2.3.0
  replaces: kiali-operator.v2.2.0
  skipRange: '>=1.0.0 <2.3.0'
- name: kiali-operator.v2.4.0
  replaces: kiali-operator.v2.3.0
  skipRange: '>=1.0.0 <2.4.0'
- name: kiali-operator.v2.5.0
  replaces: kiali-operator.v2.4.0
  skipRange: '>=1.0.0 <2.5.0'
name: stable
package: kiali
schema: olm.channel
---
image: quay.io/operatorhubio/kiali@sha256:9c651b8da70d21bd52537aa0faed66580b42de746466816c63f524216a490042
name: kiali-operator.v1.47.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.47.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.47.0
      createdAt: "2022-02-08T15:57:17Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.47.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.47.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:9c651b8da70d21bd52537aa0faed66580b42de746466816c63f524216a490042
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:a4f196ec35f027adc4905872d88e32d01c2c4ffec458577abefdbd13b041f3fc
name: kiali-operator.v1.48.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.48.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.48.0
      createdAt: "2022-03-18T13:15:26Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.48.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.48.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:a4f196ec35f027adc4905872d88e32d01c2c4ffec458577abefdbd13b041f3fc
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:fec7c0affdd6a09ef44e2b2f6f10dfaadb6fa4a72b665d64837fc7fc6d5404a3
name: kiali-operator.v1.49.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.49.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.49.0
      createdAt: "2022-04-08T00:00:00Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.49.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.49.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:fec7c0affdd6a09ef44e2b2f6f10dfaadb6fa4a72b665d64837fc7fc6d5404a3
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:8acdcbb5e1e01a010da1b61ada272a9f4c8984a995dea5cfa51c6e257af2098a
name: kiali-operator.v1.50.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.50.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.50.0
      createdAt: "2022-04-29T15:25:13Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.50.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.50.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:8acdcbb5e1e01a010da1b61ada272a9f4c8984a995dea5cfa51c6e257af2098a
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:4c19b9d42a14c6911cb1077037990272a10466739452dac0f108dc8cc898bf2e
name: kiali-operator.v1.51.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.51.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.51.0
      createdAt: "2022-05-23T12:57:19Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.51.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.51.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:4c19b9d42a14c6911cb1077037990272a10466739452dac0f108dc8cc898bf2e
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:a9501cdbea1812f388d80bb87bba6721eca599ea49c6844c7977247dafc58c6e
name: kiali-operator.v1.52.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.52.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.52.0
      createdAt: "2022-06-13T12:27:18Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.52.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.52.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:a9501cdbea1812f388d80bb87bba6721eca599ea49c6844c7977247dafc58c6e
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:ac9020ff28cd2fa71accccc81b9661eb33d2052f2642c5959f250b367596ca4d
name: kiali-operator.v1.53.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.53.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.53.0
      createdAt: "2022-07-04T07:22:24Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.53.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server Source Code
      url: https://github.com/kiali/kiali
    - name: UI Source Code
      url: https://github.com/kiali/kiali-ui
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.53.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:ac9020ff28cd2fa71accccc81b9661eb33d2052f2642c5959f250b367596ca4d
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:60d7de6da02d1e7f7f898bc62bab74826517ae0542819cc1f30a520975d6a4b1
name: kiali-operator.v1.54.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.54.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.54.0
      createdAt: "2022-07-25T07:19:27Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.54.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.54.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:60d7de6da02d1e7f7f898bc62bab74826517ae0542819cc1f30a520975d6a4b1
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:5e25b72da5cebd4507e1e53a5b3a308f6db915c8ab99bdf61347d09c9dcbcff9
name: kiali-operator.v1.55.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.55.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.55.0
      createdAt: "2022-08-15T07:16:17Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.55.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.55.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:5e25b72da5cebd4507e1e53a5b3a308f6db915c8ab99bdf61347d09c9dcbcff9
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:a899e07409ca514d6d33b1fdd61e6521f009b020a1167f767f0baa52f9ab0cbc
name: kiali-operator.v1.56.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.56.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.56.0
      createdAt: "2022-09-05T07:34:07Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.56.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.56.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:a899e07409ca514d6d33b1fdd61e6521f009b020a1167f767f0baa52f9ab0cbc
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:e1d597ec7bc764065750d200f23bbfe2a3330230d3de031103d36e38b9b911cf
name: kiali-operator.v1.57.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.57.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.57.0
      createdAt: "2022-09-26T07:35:52Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.57.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.57.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:e1d597ec7bc764065750d200f23bbfe2a3330230d3de031103d36e38b9b911cf
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:801577e9be2176e2d0373d73f9166bbdc372fcc8fe8144c49d8e772a5e616e98
name: kiali-operator.v1.58.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.58.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.58.0
      createdAt: "2022-10-17T07:46:36Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.58.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.58.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:801577e9be2176e2d0373d73f9166bbdc372fcc8fe8144c49d8e772a5e616e98
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:1322ffd87beab0e9a5c8e2c3c6f2688695c2f9b360ffd8e77145f35341d5c709
name: kiali-operator.v1.59.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.59.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.59.0
      createdAt: "2022-11-07T07:18:16Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.59.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.59.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:1322ffd87beab0e9a5c8e2c3c6f2688695c2f9b360ffd8e77145f35341d5c709
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:e869fffe0b349e858a9f9394ca9259dbcc0522e22e9c228c7e234c3feee19924
name: kiali-operator.v1.60.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.60.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.60.0
      createdAt: "2022-11-28T07:18:24Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.60.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.60.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:e869fffe0b349e858a9f9394ca9259dbcc0522e22e9c228c7e234c3feee19924
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:7e5f4e45767bb5766b09b910cdefb1e36f27b5a59e992fa09b51a055694aee43
name: kiali-operator.v1.61.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.61.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.61.0
      createdAt: "2022-12-19T07:15:34Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.61.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.61.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:7e5f4e45767bb5766b09b910cdefb1e36f27b5a59e992fa09b51a055694aee43
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:082199d600ba1766a4b9fe7cc3b6f7773cb7f1d6fead76ee36cc81b8bed806a0
name: kiali-operator.v1.62.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.62.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.62.0
      createdAt: "2023-01-09T07:17:38Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.62.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.62.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:082199d600ba1766a4b9fe7cc3b6f7773cb7f1d6fead76ee36cc81b8bed806a0
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:bdb79a884396f89cd27ee180706823ccdb0e81079c23ff23c32bb96fa679d000
name: kiali-operator.v1.63.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.63.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.63.0
      createdAt: "2023-01-30T07:16:40Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.63.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.63.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:bdb79a884396f89cd27ee180706823ccdb0e81079c23ff23c32bb96fa679d000
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:1b4abd66701f8f8bb7e5b98a175eb32507c63c48ec7fc4b2e2e8d08b60506070
name: kiali-operator.v1.63.1
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.63.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.63.1
      createdAt: "2023-01-30T17:57:27Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.63.1'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.63.1
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:1b4abd66701f8f8bb7e5b98a175eb32507c63c48ec7fc4b2e2e8d08b60506070
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:7e02e589445a1fe5255dc8e788c5a5de9d5a3518fb77a7a3147c23b458e1d50b
name: kiali-operator.v1.64.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.64.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.64.0
      createdAt: "2023-02-20T07:17:23Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.64.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.64.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:7e02e589445a1fe5255dc8e788c5a5de9d5a3518fb77a7a3147c23b458e1d50b
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:b71e9bf3a382ca2a4f1df3d8db05176fa402f2e9f4ec383d8812463dd42c00a6
name: kiali-operator.v1.65.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.65.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.65.0
      createdAt: "2023-03-13T07:15:09Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.65.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.65.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:b71e9bf3a382ca2a4f1df3d8db05176fa402f2e9f4ec383d8812463dd42c00a6
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:1626582437f7c54f63e6b86caffe9dcb847741952d74c0546624dea1950ff7b1
name: kiali-operator.v1.66.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.66.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.66.0
      createdAt: "2023-04-03T07:15:38Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.66.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.66.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:1626582437f7c54f63e6b86caffe9dcb847741952d74c0546624dea1950ff7b1
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:63e0472c7c3cb6840a14c97994bbd671f636a7cfd702a990d7d512c0ddee3475
name: kiali-operator.v1.67.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.67.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.67.0
      createdAt: "2023-04-24T07:15:08Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.67.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.67.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:63e0472c7c3cb6840a14c97994bbd671f636a7cfd702a990d7d512c0ddee3475
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:048e8637d6a685f40b02d1783f3d7c968f169a97f6dd09fe9705b86c0cadd040
name: kiali-operator.v1.68.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.68.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.68.0
      createdAt: "2023-05-15T07:16:19Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.68.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.68.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:048e8637d6a685f40b02d1783f3d7c968f169a97f6dd09fe9705b86c0cadd040
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:c84edddb9a08352556d986f05185561d3d0832b2af8b4b4ea55f55054f1cae95
name: kiali-operator.v1.69.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.69.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.69.0
      createdAt: "2023-06-05T07:16:12Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.69.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.69.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:c84edddb9a08352556d986f05185561d3d0832b2af8b4b4ea55f55054f1cae95
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:62c810281205b3c903f60542470428e7050af6eefcc1bac88c9fff4c1ae04002
name: kiali-operator.v1.70.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.70.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.70.0
      createdAt: "2023-06-26T07:17:17Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.70.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.70.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:62c810281205b3c903f60542470428e7050af6eefcc1bac88c9fff4c1ae04002
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:e99c7f74d8790393533df06cab8e12d614c11c5413183e959c49db16321e57f4
name: kiali-operator.v1.71.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.71.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.71.0
      createdAt: "2023-07-17T07:17:49Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.71.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.71.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:e99c7f74d8790393533df06cab8e12d614c11c5413183e959c49db16321e57f4
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:c8162f53703a911e5b9779767c5a8d961a34a705cf745772d66c7f3a084f17fe
name: kiali-operator.v1.72.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.72.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.72.0
      createdAt: "2023-08-07T07:14:40Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.72.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.72.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:c8162f53703a911e5b9779767c5a8d961a34a705cf745772d66c7f3a084f17fe
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:f8f5354e59bdf238dfb55fc9f81da3a623d50ae8e3700f60d5026969e0f8b6dd
name: kiali-operator.v1.73.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.73.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.73.0
      createdAt: "2023-08-28T07:15:58Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.73.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.73.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:f8f5354e59bdf238dfb55fc9f81da3a623d50ae8e3700f60d5026969e0f8b6dd
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:2a970dca4397fdd8abf00046e6577c118ed476722d8ad0f2257116544ceb763d
name: kiali-operator.v1.74.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.74.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.74.0
      createdAt: "2023-09-18T07:14:13Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.74.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.74.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:2a970dca4397fdd8abf00046e6577c118ed476722d8ad0f2257116544ceb763d
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:5dd7517325d296ce7a657dcb0e3964a83de73bf7bdcfc0d70a051673eadb0e64
name: kiali-operator.v1.75.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.75.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.75.0
      createdAt: "2023-10-09T07:15:09Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.75.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.75.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:5dd7517325d296ce7a657dcb0e3964a83de73bf7bdcfc0d70a051673eadb0e64
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:b6d14d6164ddd3855912f451d70416d0e754cd7567d82762926646f6ce20f259
name: kiali-operator.v1.76.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.76.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "installation_tag": "My Kiali",
              "istio_namespace": "istio-system",
              "deployment": {
                "namespace": "default",
                "view_only_mode": false
              },
              "server": {
                "web_root": "/mykiali"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.76.0
      createdAt: "2023-10-30T07:14:55Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.76.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'Determines how a user is to log into Kiali. Default: openshift
            (when deployed in OpenShift); token (when deployed in other Kubernetes
            clusters)'
          displayName: Authentication Strategy
          path: auth.strategy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'The namespace where Kiali and its associated resources will
            be created. Default: istio-system'
          displayName: Kiali Namespace
          path: deployment.namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - description: 'Defines the root context path for the Kiali console, API endpoints
            and readiness/liveness probes. Default: / (when deployed on OpenShift;
            /kiali (when deployed on Kubernetes)'
          displayName: Web Root
          path: server.web_root
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:label
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      The Kiali operator can expose the Kiali UI as a Route on OpenShift
      or Ingress on Kubernetes.

      On OpenShift, the default root context path is '/' and on Kubernetes it is
      '/kiali' though you can change this by configuring the 'web_root' setting in
      the Kiali CR.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      Note that the Kiali operator can be told to restrict Kiali's access to
      specific namespaces, or can provide to Kiali cluster-wide access to all
      namespaces.

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.

      When you install Kiali in a non-OpenShift Kubernetes environment, the
      authentication strategy will default to `token`.

      If you wish to use the `openid` authentication strategy, you must have an
      OpenID Connect available and accessible to Kiali.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.76.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:b6d14d6164ddd3855912f451d70416d0e754cd7567d82762926646f6ce20f259
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:f05a08ad08a4243ad676ce492b9ef9625f28b3de4c552a14fed321409fb367d5
name: kiali-operator.v1.77.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.77.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.77.0
      createdAt: "2023-11-20T07:13:37Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.77.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.77.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:f05a08ad08a4243ad676ce492b9ef9625f28b3de4c552a14fed321409fb367d5
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:a20a2bb32210131e490300b7b654cfa18a066910e581b174d8864866dbe7d363
name: kiali-operator.v1.78.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.78.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.78.0
      createdAt: "2023-12-11T07:13:40Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.78.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.78.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:a20a2bb32210131e490300b7b654cfa18a066910e581b174d8864866dbe7d363
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:79be954ee8a36849b6f2b8eb48e7a0c78288fac8c15b638058a0916c343f0de1
name: kiali-operator.v1.79.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.79.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.79.0
      createdAt: "2024-01-22T07:15:47Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.79.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.79.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:79be954ee8a36849b6f2b8eb48e7a0c78288fac8c15b638058a0916c343f0de1
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:888ee1e929d48a4c9f3c6eaf809183a2b05df65cbae3c4d25ecccaa24f24e7af
name: kiali-operator.v1.80.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.80.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.80.0
      createdAt: "2024-02-12T07:14:33Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.80.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.80.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:888ee1e929d48a4c9f3c6eaf809183a2b05df65cbae3c4d25ecccaa24f24e7af
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:6d3dea58e0ce3e8466a137db2cdfcf6e4d85b8b0b29abf2da8695923ff9e8c7b
name: kiali-operator.v1.81.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.81.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.81.0
      createdAt: "2024-03-04T07:59:28Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.81.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.81.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:6d3dea58e0ce3e8466a137db2cdfcf6e4d85b8b0b29abf2da8695923ff9e8c7b
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:e96be528805d26360c5f55f58b52846f13fefb0605946be8d3034616cf50b8da
name: kiali-operator.v1.82.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.82.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.82.0
      createdAt: "2024-03-25T23:20:44Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.82.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.82.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:e96be528805d26360c5f55f58b52846f13fefb0605946be8d3034616cf50b8da
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:693d0fdda3af4b0f4f01288f16369bbc5eb9e41276c0573a59d958fa9ce68e1b
name: kiali-operator.v1.83.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.83.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.83.0
      createdAt: "2024-04-15T07:13:26Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.83.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.83.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:693d0fdda3af4b0f4f01288f16369bbc5eb9e41276c0573a59d958fa9ce68e1b
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:a91f2c1d21768fbd228cb21c393010e721427293ff173cbca190ef7a82a1bec2
name: kiali-operator.v1.84.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.84.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.84.0
      createdAt: "2024-05-06T07:15:43Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.84.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.84.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:a91f2c1d21768fbd228cb21c393010e721427293ff173cbca190ef7a82a1bec2
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:bc5aea7f958f28075de3c4d3cca21333833ebfeab690aa5a3d84a415df78b297
name: kiali-operator.v1.85.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.85.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.85.0
      createdAt: "2024-05-27T07:17:33Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.85.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.85.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:bc5aea7f958f28075de3c4d3cca21333833ebfeab690aa5a3d84a415df78b297
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:7804999d2aa084b9abb29c3ea46a636d074e321c34e2eca80f31b1a130fe4d63
name: kiali-operator.v1.86.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.86.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.86.0
      createdAt: "2024-06-17T07:16:56Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.86.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.86.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:7804999d2aa084b9abb29c3ea46a636d074e321c34e2eca80f31b1a130fe4d63
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:8a14b5ea53cd69269097953d929615cf99f2a86b5a100f1296052d32a6884a07
name: kiali-operator.v1.87.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.87.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.87.0
      createdAt: "2024-07-08T13:15:07Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.87.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.87.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:8a14b5ea53cd69269097953d929615cf99f2a86b5a100f1296052d32a6884a07
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:af665518bf48b78e5e4bc9f0873e1dcfb46b70e7a4d299ca476f039699e99867
name: kiali-operator.v1.88.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.88.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.88.0
      createdAt: "2024-07-29T07:17:44Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.88.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.88.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:af665518bf48b78e5e4bc9f0873e1dcfb46b70e7a4d299ca476f039699e99867
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:dcc4a090b89b90aacb41760a60fc911c57e6cfd2525d931adabaef1fc2138ff4
name: kiali-operator.v1.89.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 1.89.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v1.89.0
      createdAt: "2024-08-19T07:18:32Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <1.89.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v1.89.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:dcc4a090b89b90aacb41760a60fc911c57e6cfd2525d931adabaef1fc2138ff4
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:3f5c526fed18e8298a02eb44d5abdf4fde6ef753af59909c1dabd6a9d7d61839
name: kiali-operator.v2.0.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 2.0.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v2.0.0
      createdAt: "2024-10-21T11:44:23Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <2.0.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v2.0.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:3f5c526fed18e8298a02eb44d5abdf4fde6ef753af59909c1dabd6a9d7d61839
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:b2dba77b59d61994f71c9dde62231f88c994add5b90e30b589b3bd7625f11187
name: kiali-operator.v2.1.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 2.1.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v2.1.0
      createdAt: "2024-11-11T14:22:25Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <2.1.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v2.1.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:b2dba77b59d61994f71c9dde62231f88c994add5b90e30b589b3bd7625f11187
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:3f780913227f630afb9cf9ba2691ffe3efdfa3e618b96775a2c7856b7d06d7c4
name: kiali-operator.v2.2.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 2.2.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v2.2.0
      createdAt: "2024-12-02T07:18:17Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <2.2.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v2.2.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:3f780913227f630afb9cf9ba2691ffe3efdfa3e618b96775a2c7856b7d06d7c4
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:8e979f1cfd947b8788744970c75054caa26f1c853b2ddbeef78cbc8196d787cc
name: kiali-operator.v2.3.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 2.3.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v2.3.0
      createdAt: "2024-12-23T07:16:55Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <2.3.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v2.3.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:8e979f1cfd947b8788744970c75054caa26f1c853b2ddbeef78cbc8196d787cc
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:c80a91284a9e3c36f882bd1316aa06154c7c026ce8d978039ceeb03e5fedcf2c
name: kiali-operator.v2.4.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 2.4.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v2.4.0
      createdAt: "2025-01-13T12:25:42Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <2.4.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v2.4.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:c80a91284a9e3c36f882bd1316aa06154c7c026ce8d978039ceeb03e5fedcf2c
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/kiali@sha256:7300061a7216936742f481ca41ced3d38e9abdb35080695a1e01444da4420460
name: kiali-operator.v2.5.0
package: kiali
properties:
- type: olm.gvk
  value:
    group: kiali.io
    kind: Kiali
    version: v1alpha1
- type: olm.package
  value:
    packageName: kiali
    version: 2.5.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "kiali.io/v1alpha1",
            "kind": "Kiali",
            "metadata": {
              "name": "kiali"
            },
            "spec": {
              "version": "default",
              "istio_namespace": "istio-system",
              "deployment": {
                "logger": {
                  "log_level": "info"
                },
                "view_only_mode": false
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Monitoring,Logging & Tracing
      certified: "false"
      containerImage: quay.io/kiali/kiali-operator:v2.5.0
      createdAt: "2025-02-03T07:18:08Z"
      description: 'Kiali project provides answers to the questions: What microservices
        are part of my Istio service mesh and how are they connected?'
      olm.skipRange: '>=1.0.0 <2.5.0'
      repository: https://github.com/kiali/kiali
      support: Kiali
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: A configuration file for a Kiali installation.
        displayName: Kiali
        kind: Kiali
        name: kialis.kiali.io
        resources:
        - kind: Deployment
          name: ""
          version: apps/v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: OAuthClient
          name: ""
          version: oauth.openshift.io/v1
        - kind: Route
          name: ""
          version: route.openshift.io/v1
        specDescriptors:
        - description: 'The version of the Kiali Server to install. This is specified
            in the form ''vX.Y''. Check the documentation for the values that are
            valid and supported. When not specified, or when set to the string ''default'',
            the latest supported version of the Kiali Server will be installed. Default:
            default'
          displayName: Version
          path: version
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'The namespace where the Istio control plane is installed.
            Default: istio-system'
          displayName: Istio Namespace
          path: deployment.istio_namespace
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:text
        - description: 'Determines the priority levels of log messages Kiali will
            output. Typical values are ''info'', ''debug'', or ''trace''. Default:
            info'
          displayName: Log Level
          path: deployment.logger.log_level
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:select:info
          - urn:alm:descriptor:com.tectonic.ui:select:debug
          - urn:alm:descriptor:com.tectonic.ui:select:trace
          - urn:alm:descriptor:com.tectonic.ui:select:warn
          - urn:alm:descriptor:com.tectonic.ui:select:error
        - description: 'When true, Kiali will be in ''view only'' mode, allowing the
            user to view and retrieve management and monitoring data for the service
            mesh, but not allow the user to modify the service mesh. Default: false'
          displayName: View Only Mode
          path: deployment.view_only_mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        version: v1alpha1
    description: |-
      ## About the managed application

      A Microservice Architecture breaks up the monolith into many smaller pieces
      that are composed together. Patterns to secure the communication between
      services like fault tolerance (via timeout, retry, circuit breaking, etc.)
      have come up as well as distributed tracing to be able to see where calls
      are going.

      A service mesh can now provide these services on a platform level and frees
      the application writers from those tasks. Routing decisions are done at the
      mesh level.

      Kiali works with Istio, in OpenShift or Kubernetes, to visualize the service
      mesh topology, to provide visibility into features like circuit breakers,
      request rates and more. It offers insights about the mesh components at
      different levels, from abstract Applications to Services and Workloads.

      See [https://www.kiali.io](https://www.kiali.io) to read more.

      ### Accessing the UI

      By default, the Kiali operator exposes the Kiali UI as a Kubernetes Ingress.

      ## About this Operator

      ### Kiali Custom Resource Configuration Settings

      For quick descriptions of all the settings you can configure in the Kiali
      Custom Resource (CR), see
      [the kiali.io docs](https://kiali.io/docs/configuration/kialis.kiali.io/).

      ## Prerequisites for enabling this Operator

      Today Kiali works with Istio. So before you install Kiali, you must have
      already installed Istio.
      If you already have Kiali in your Istio environment and you want to
      install Kiali via the Kiali Operator, uninstall the installed Kiali first.
    displayName: Kiali Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - service-mesh
    - observability
    - monitoring
    - maistra
    - istio
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
    links:
    - name: Installation Guide
      url: https://www.kiali.io/docs/installation
    - name: Features
      url: https://www.kiali.io/docs/features
    - name: Documentation Home
      url: https://www.kiali.io
    - name: Blogs and Articles
      url: https://medium.com/kialiproject
    - name: Server and UI Source Code
      url: https://github.com/kiali/kiali
    - name: Operator Source Code
      url: https://github.com/kiali/kiali-operator
    - name: OpenShift Service Mesh Console Code
      url: https://github.com/kiali/openshift-servicemesh-plugin
    maintainers:
    - email: kiali-dev@googlegroups.com
      name: Kiali Developers Google Group
    maturity: stable
    provider:
      name: Kiali
relatedImages:
- image: quay.io/kiali/kiali-operator:v2.5.0
  name: ""
- image: quay.io/operatorhubio/kiali@sha256:7300061a7216936742f481ca41ced3d38e9abdb35080695a1e01444da4420460
  name: ""
schema: olm.bundle
